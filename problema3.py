# -*- coding: utf-8 -*-
"""problema3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QxzF3GsFZryIT6hTL2G8mbSG_kZdqxtD
"""

#Problema 2  / 7 ptos x4 pruebas / 28 puntos
#Ingreso de valores en árbol TRI-nario
#---------------------------------------------------------------------------------
#Confeccione un programa que lea varios números y cree un árbol trinario con listas
# esto es igual que el binario, pero los elementos que son iguales van en una lista
# centro, de la forma [numero, [subarbol IZQ], [mismo NUM], [subarbol DER] ]
#---------------------------------------------------------------------------------
#Ejemplo de entrada:
#         20 30 90 90 8 5 90
#La salida debe ser
#         [20, [8, [5, [], [], []], [], []], [], [30, [], [], [90, [], [90, [], [90, [], [], []], []], []]]]

def crearArbol(numero):
    return {"numero": numero, "izquierda": None, "centro": None, "derecha": None}

def insertaEnArbolBinario(arbol, numero):
    if arbol is None:
        return crearArbol(numero)
    if numero < arbol["numero"]:
        arbol["izquierda"] = insertaEnArbolBinario(arbol["izquierda"], numero)
    elif numero > arbol["numero"]:
        arbol["derecha"] = insertaEnArbolBinario(arbol["derecha"], numero)
    else:
        if arbol["centro"] is None:
            arbol["centro"] = crearArbol(numero)
        else:
            arbol["centro"] = insertaEnArbolBinario(arbol["centro"], numero)
    return arbol

def mostrarArbol(arbol):
    if arbol is None:
        return []
    return [arbol["numero"], mostrarArbol(arbol["izquierda"]), mostrarArbol(arbol["centro"]), mostrarArbol(arbol["derecha"])]

def leer_numeros():
    numeros = input().split()
    return [int(numero) for numero in numeros]

numeros = leer_numeros()
arbol = None
for numero in numeros:
    arbol = insertaEnArbolBinario(arbol, numero)

print(mostrarArbol(arbol))